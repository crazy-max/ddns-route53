name: build

on:
  pull_request:
    branches: master
  push:
    branches: master
    tags: v*

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      -
        name: Prepare
        id: prepare
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo ::set-output name=tag_name::${GITHUB_REF#refs/tags/}
            echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
          else
            echo ::set-output name=version::snapshot
          fi
          echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
  go:
    runs-on: ubuntu-latest
    needs: init
    steps:
      -
        # https://github.com/actions/setup-go
        name: Set up Go
        uses: actions/setup-go@master
        with:
          go-version: 1.12.4
      -
        name: Set GOPATH
        # temporary fix (see https://github.com/actions/setup-go/issues/14)
        run: |
          echo "##[set-env name=GOPATH;]$(dirname $GITHUB_WORKSPACE)"
          echo "##[add-path]$(dirname $GITHUB_WORKSPACE)/bin"
      -
        # https://github.com/actions/checkout
        name: Checkout
        uses: actions/checkout@v1
      -
        # https://github.com/crazy-max/ghaction-goreleaser
        name: GoReleaser
        uses: crazy-max/ghaction-goreleaser@master
        with:
          version: latest
          args: release --skip-publish --rm-dist
      -
        # https://github.com/softprops/action-gh-release
        name: GitHub Release
        uses: softprops/action-gh-release@v1
        if: success() && startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: release/*
          name: ${{ jobs.init.steps.prepare.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docker:
    runs-on: ubuntu-latest
    needs: [init, go]
    steps:
      -
        # https://github.com/crazy-max/ghaction-docker-buildx
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@master
        with:
          version: latest
      -
        # https://github.com/actions/checkout
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Docker Buildx (no push)
        if: startsWith(github.ref, 'refs/heads/') || github.event_name == 'pull_request'
        run: |
          docker buildx build --platform ${{ jobs.init.steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=false" \
            --build-arg "VERSION=${{ jobs.init.steps.prepare.outputs.version }}" \
            --label "org.label-schema.build-date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "org.label-schema.version=${{ jobs.init.steps.prepare.outputs.version }}" \
            --label "org.label-schema.vcs-ref=${GITHUB_SHA::8}" \
            --tag "${DOCKER_IMAGE}:latest" \
            --tag "${DOCKER_IMAGE}:${{ jobs.init.steps.prepare.outputs.version }}" \
            --file Dockerfile .
      -
        # quay does not currently support multi-arch images
        # https://github.com/moby/buildkit/issues/409
        name: Docker Build (quay.io)
        run: |
          docker build \
            --build-arg VERSION=${{ jobs.init.steps.prepare.outputs.version }} \
            --label "org.label-schema.build-date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "org.label-schema.version=${{ jobs.init.steps.prepare.outputs.version }}" \
            --label "org.label-schema.vcs-ref=${GITHUB_SHA::8}" \
            --tag "${QUAY_IMAGE}:${{ jobs.init.steps.prepare.outputs.version }}" \
            --tag "${QUAY_IMAGE}:latest" \
            --file Dockerfile .
      -
        name: Docker Login
        if: success() && startsWith(github.ref, 'refs/tags/v')
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
          echo "${QUAY_PASSWORD}" | docker login quay.io --username "${QUAY_USERNAME}" --password-stdin
      -
        name: Docker Buildx (push)
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: |
          docker buildx build --platform ${{ jobs.init.steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=true" \
            --build-arg "VERSION=${{ jobs.init.steps.prepare.outputs.version }}" \
            --label "org.label-schema.build-date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "org.label-schema.version=${{ jobs.init.steps.prepare.outputs.version }}" \
            --label "org.label-schema.vcs-ref=${GITHUB_SHA::8}" \
            --tag "${DOCKER_IMAGE}:${{ jobs.init.steps.prepare.outputs.version }}" \
            --tag "${DOCKER_IMAGE}:latest" \
            --file Dockerfile .
      -
        name: Docker Push (quay.io)
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: |
          docker push ${QUAY_IMAGE}
      -
        name: Docker Check Manifest
        if: always() && startsWith(github.ref, 'refs/tags/v')
        run: |
          docker run --rm mplatform/mquery ${DOCKER_IMAGE}:${{ jobs.init.steps.prepare.outputs.version }}
          docker run --rm mplatform/mquery ${QUAY_IMAGE}:${{ jobs.init.steps.prepare.outputs.version }}
      -
        name: Clear
        if: always() && startsWith(github.ref, 'refs/tags/v')
        run: |
          rm -f ${HOME}/.docker/config.json
